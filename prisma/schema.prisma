generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  periodAnchor DateTime?
  passwordHash String? // optional for credentials auth

  // Single relation to BudgetItem; filter by type=INCOME/EXPENSE in queries
  items             BudgetItem[]
  transactions ActualTransaction[]
}

enum ItemType {
  INCOME
  EXPENSE
}

enum Frequency {
  WEEKLY
  FORTNIGHTLY
  MONTHLY
}

model BudgetItem {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  type        ItemType
  name        String
  amountCents Int
  frequency   Frequency

  // Frequency-specific
  weeklyDay       Int? // 0..6 (Sun..Sat)
  fortnightAnchor DateTime? // first occurrence date
  monthDay        Int? // 1..31 (29..31 clamp to month end)

  startDate DateTime // inclusive
  endDate   DateTime? // inclusive

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActualTransaction {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  amountCents Int
  description String
  category    String?
  source      String?   // "manual" | "generated" | "import:<bank>"
  // ↓↓↓ new
  isGenerated   Boolean   @default(false)
  generatedFrom String?   // e.g. "item:<BudgetItem.id>"
  reconciled    Boolean   @default(false) // when matched to bank feed or confirmed manually

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, date])
  // prevents duplicates for the same item+date+amount for a user:
  @@unique([userId, generatedFrom, date, amountCents])
}
